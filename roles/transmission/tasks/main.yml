#SPDX-License-Identifier: MIT-0
---
################################################################################
# packages

- name: add non-free repo to debian for unrar
  ansible.builtin.command:
    cmd: "apt-add-repository -yn contrib non-free"

- name: install transmission packages
  apt:
    pkg: "{{ item }}"
    state: latest
    update_cache: true
  with_items:
    - transmission-daemon
    - unrar
    - rsync

################################################################################
# transmission daemon

- block:
    - name: stop transmission-deamon if running
      ansible.builtin.service:
        name: transmission-daemon
        state: stopped

    - name: copy settings.json
      ansible.builtin.template:
        src: settings.json.j2
        dest: /etc/transmission-daemon/settings.json

    - name: "debug"
      debug:
        msg: "{{ script_torrent_done_filename }}"
    - name: copy unrar.sh script
      ansible.builtin.template:
        src: unrar.sh.j2
        dest: "{{ script_torrent_done_filename }}"
        mode: "0777"

    - name: enable transmission-daemon
      ansible.builtin.service:
        name: transmission-daemon
        enabled: yes

    - name: restart transmission-daemon
      ansible.builtin.service:
        name: transmission-daemon
        state: restarted
  tags: transmission-daemon

############################################################################
# restore backups if any

- name: copy the tarball to the destination
  ansible.builtin.copy:
    src: "{{ item.source }}"
    dest: "/tmp/{{ item.name }}.tar.gz"
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: "0744"
  when: item.defined == true
  with_items: "{{ backups }}"

- name: create target directory
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/services/volumes/{{ item.name }}"
    state: directory
  when: item.defined == true
  with_items: "{{ backups }}"

- name: extract the tarball on the remote
  command: "tar -xzf /tmp/{{ item.name }}.tar.gz -C {{ ansible_user_dir }}/services/volumes"
  when: item.defined == true
  with_items: "{{ backups }}"

- name: extract the tarball on the remote
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/services/volumes/{{ item.name }}"
    state: directory
    recurse: yes
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
  with_items: "{{ backups }}"

############################################################################
# services

- name: stop all services
  community.docker.docker_compose_v2:
    project_src: "{{ ansible_user_dir }}/services"
    state: stopped
  register: output

- name: create directory for services
  file:
    path: "{{ item }}"
    recurse: true
    state: directory
    mode: "0775"
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
  with_items:
    - "{{ ansible_user_dir }}/services"

- name: install docker-compose for services
  template:
    src: docker-compose.yml.j2
    dest: "{{ ansible_user_dir }}/services/docker-compose.yaml"
    mode: "0775"
    owner: "{{ ansible_user }}"
    group: root

- name: pull the containers
  command: "docker compose pull"
  args:
    chdir: "{{ ansible_user_dir }}/services"

- name: start all services
  community.docker.docker_compose_v2:
    project_src: "{{ ansible_user_dir }}/services"
    state: restarted
    recreate: always
