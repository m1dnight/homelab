
logging {
  level    = "debug"
  format   = "json"
  write_to = [loki.write.default.receiver]
}

////////////////////////////////////////////////////////////////////////////////
// Logs

loki.write "default" {
  endpoint {
    url = "http://localhost:3100/loki/api/v1/push"
  }
}

loki.relabel "journal" {
  forward_to = []

  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }
}

loki.source.journal "read"  {
  forward_to    = [loki.write.endpoint.receiver]
  relabel_rules = loki.relabel.journal.rules
  labels        = {component = "loki.source.journal", host = "{{ ansible_hostname }}"}
}

loki.write "endpoint" {
  endpoint {
    url ="http://localhost:3100/loki/api/v1/push"
  }
}

////////////////////////////////////////////////////////////////////////////////
// Scrape prometheus endpoints

prometheus.scrape "minio" {
    targets = [{"__address__" = "minio.isolated:9000", group = "infrastructure", service = "minio", host = "{{ ansible_hostname }}"}]
    forward_to = [prometheus.remote_write.mimir.receiver]
    metrics_path = "/minio/v2/metrics/cluster"
    scrape_interval = "30s"
    job_name = "minio"
}
prometheus.scrape "alloy" {
    targets = [{"__address__" = "localhost:12345", group = "infrastructure", service = "alloy", host = "{{ ansible_hostname }}"}]
    forward_to = [prometheus.remote_write.mimir.receiver]
    scrape_interval = "30s"
    job_name = "alloy"
}

prometheus.scrape "memcached" {
    targets = [{"__address__" = "localhost:9150", group = "infrastructure", service = "memcached", host = "{{ ansible_hostname }}"}]
    forward_to = [prometheus.remote_write.mimir.receiver]
    scrape_interval = "30s"
    job_name = "memcached"
}

prometheus.scrape "loki" {
    targets = [{"__address__" = "localhost:3100", group = "infrastructure", service = "loki", host = "{{ ansible_hostname }}"}]
    forward_to = [prometheus.remote_write.mimir.receiver]
    scrape_interval = "30s"
    job_name = "loki"
}


discovery.relabel "metrics_integrations_integrations_hass" {
	targets = [{
		__address__ = "{{ home_assistant_url }}",
	}]

	rule {
		target_label = "instance"
		replacement  = constants.hostname
	}
}

prometheus.scrape "metrics_integrations_integrations_hass" {
	targets      = discovery.relabel.metrics_integrations_integrations_hass.output
  forward_to = [prometheus.remote_write.mimir.receiver]
	job_name     = "integrations/hass"
	metrics_path = "/api/prometheus"
	scheme       = "https"

	authorization {
		type        = "Bearer"
		credentials = "{{ home_assistant_key }}"
	}
}

prometheus.remote_write "mimir" {
  endpoint {
    url = "http://localhost:9009/api/v1/push"
  }
}